# The URL of the directory which will host the repository (feeds, keys, stylesheets and catalogue).
REPOSITORY_BASE_URL = "http://example.com/myrepo/"

# The GPG secret key which 0repo should use to sign the generated feeds and any
# Git commits it makes. The fingerprint preceeded by "0x" is the most precise
# way to identity a key (see "HOW TO SPECIFY A USER ID" in the gpg(1) man-page
# for other options).
GPG_SIGNING_KEY = "0x2E32123D8BE241A3B6D91E0301685F11607BB2C5"

# Command to sync the public directory to the web hosting.
# If None, you must sync manually after running 0repo.
SYNC_PUBLIC_COMMAND = None

# If set, XML feeds in the "incoming" directory and any Git pull requests must be signed by one of
# these keys, otherwise they will be rejected. For local use, this can be set to None so that the
# files don't need to be signed.
CONTRIBUTOR_GPG_KEYS = None

# False : no license checking
# True  : all implementations must specify a license
# A set : all implementations must specify a license from the given set
REQUIRE_LICENSE = True
#REQUIRE_LICENSE = {"OSI Approved :: GNU Lesser General Public License (LGPL)"}


#### Archive hosting ####

from repo import paths
import subprocess
from os.path import join

# The URL of the directory containing the archives (which will not be under REPOSITORY_BASE_URL if
# you are hosting archives on a different server). Note that uploaders can choose whether to store
# archives within 0repo or externally. This setting does not affect external archives, only archives
# managed by 0repo.
ARCHIVES_BASE_URL = REPOSITORY_BASE_URL + "archives/"

# Where to keep backups of the archives after uploading them.
# If None, they will be deleted after upload.
LOCAL_ARCHIVES_BACKUP_DIR = "archives/"

# At what URL under ARCHIVES_BASE_URL should this file/archive be served?
# Note that there may be multiple archives/files for a single version, so you probably want to
# keep archive_basename in the final URL.
def get_archive_rel_url(archive_basename, impl):
	# Example 1 (default)		e.g. http://.../myprog-1.0.tar.bz2
	return archive_basename

	# Example 2 (SourceForge)	e.g. http://.../myprog/1.0/myprog-1.0.tar.bz2
	return "{program}/{version}/{archive}".format(
		program = impl.feed.get_name().replace(' ', '-'),
		version = impl.get_version(),
		archive = archive_basename)

# Upload these archives (from the incoming directory) to the file server.
# For each archive in the list:
#   archive.source_path = path to local archive to be uploaded
#   archive.rel_url = result from get_archive_rel_url() above
# If any target files already exist, overwrite them (we will retry if uploading
# fails part way through).
# If this function returns without an error, the original copies will be moved
# under LOCAL_ARCHIVES_BACKUP_DIR (or deleted if that's not set).
def upload_archives(archives):
	for dir_rel_url, files in paths.group_by_target_url_dir(archives):
		# Example 1 : simple copy to local web-server directory
		#archives_local_dir = "/home/me/public_html/archives/"
		#subprocess.check_call(["cp"] + files + [join(archives_local_dir, dir_rel_url)])

		raise Exception("No upload method specified: edit upload_archives() in 0repo-config.py")

#### Advanced configuration ####

# uri_rel_path is the part of the feed's URL following REPOSITORY_BASE_URL.
# Where should it be placed within "feeds"? By default, these are the same.
# You might want to change this if you have a strange naming scheme (e.g. feed
# URLs ending in "/" or without an extension). The result must end in '.xml'.
def get_feeds_rel_path(uri_rel_path):
	return uri_rel_path

# A source feed "feeds/games/my-game.xml" has a relative path of
# "games/my-game.xml". Where should the corresponding generated (signed) feed
# be placed under "public"? The default (and recommended) setting is to keep it
# the same, so we would generate "public/games/my-game.xml" in this case.
#
# When migrating an existing repository with a different scheme, you might need to
# change this function. For example, some repositories save the generated feed
# as "public/games/my-game/feed.xml" and configure Apache to make it appear as
# "http://example.com/games/my-game".
def get_public_rel_path(feeds_rel_path):
	return feeds_rel_path
