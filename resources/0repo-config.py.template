# The URL of the directory which will host the repository (feeds, keys, stylesheets and catalogue).
REPOSITORY_BASE_URL = "http://example.com/myrepo/"

# The URL of the directory containing the archives (which will not be under REPOSITORY_BASE_URL if
# you are hosting archives on a different server). Note that uploaders can choose whether to store
# archives within 0repo or externally. This setting does not affect external archives, only archives
# managed by 0repo.
ARCHIVES_BASE_URL = REPOSITORY_BASE_URL + "/archives/"

# The GPG secret key which 0repo should use to sign the generated feeds and any
# Git commits it makes. The fingerprint preceeded by "0x" is the most precise
# way to identity a key (see "HOW TO SPECIFY A USER ID" in the gpg(1) man-page
# for other options).
GPG_SIGNING_KEY = "0xDA9825AECAD089757CDABD8E07133F96CA74D8BA"

# The local directory in which to store accepted archives.
# This corresponds to ARCHIVES_BASE_URL.
LOCAL_ARCHIVES_DIR = "public/archives/"

# Command to sync the public directory to the web hosting.
# If None, you must sync manually after running 0repo.
SYNC_PUBLIC_COMMAND = None

# Command to upload archives to your archive hosting.
# If the archives are under "public" (the default) then this should be set to None,
# since SYNC_PUBLIC_COMMAND will upload the archives along with the feeds.
UPLOAD_ARCHIVES_COMMAND = None

# If set, XML feeds in the "incoming" directory and any Git pull requests must be signed by one of
# these keys, otherwise they will be rejected. For local use, this can be set to None so that the
# files don't need to be signed.
CONTRIBUTOR_GPG_KEYS = None

# False : no license checking
# True  : all implementations must specify a license
# A set : all implementations must specify a license from the given set
REQUIRE_LICENSE = True
#REQUIRE_LICENSE = {"OSI Approved :: GNU Lesser General Public License (LGPL)"}


#### Advanced configuration ####

# uri_rel_path is the part of the feed's URL following REPOSITORY_BASE_URL.
# Where should it be placed within "feeds"? By default, these are the same.
# You might want to change this if you have a strange naming scheme (e.g. feed
# URLs ending in "/" or without an extension). The result must end in '.xml'.
def get_feeds_rel_path(uri_rel_path):
	return uri_rel_path

# A source feed "feeds/games/my-game.xml" has a relative path of
# "games/my-game.xml". Where should the corresponding generated (signed) feed
# be placed under "public"? The default (and recommended) setting is to keep it
# the same, so we would generate "public/games/my-game.xml" in this case.
#
# When migrating an existing repository with a different scheme, you might need to
# change this function. For example, some repositories save the generated feed
# as "public/games/my-game/feed.xml" and configure Apache to make it appear as
# "http://example.com/games/my-game".
def get_public_rel_path(feeds_rel_path):
	return feeds_rel_path
